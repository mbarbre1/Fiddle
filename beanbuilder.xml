<?xml version="1.0" ?>

<beanBuilder extDir="c:\eclipse\workspace\fiddle\bb">

	<!-- Definitions for the creation of the interfaces -->
	<interface prefix="I" package="com.barbre.fiddle.elements">
	
		<!-- Template definition for the class itself -->
		<classTemplate>
			package [PACKAGE];
			
			[IMPORTS]
			
			/**
			 * Generated by BeanBuilder for SIDL Fiddle
			 */
			public interface [IPREFIX][NAME] extends [IPREFIX][PARENT] {
				[ATTRIBUTES]
			}
		</classTemplate>
		
		<!-- Simple get template -->
		<getTemplate>
			[TYPE] get[NAME]();
		</getTemplate>
		
		<!-- Simple set template -->
		<setTemplate>
			void set[NAME]([TYPE] value);
		</setTemplate>
		
		<!-- A reference object get template -->
		<getRefTemplate>
			[TYPE] get[NAME]Object();
		</getRefTemplate>
		
		<!-- A reference object set template -->
		<setRefTemplate>
			void set[NAME]Object([TYPE] value);
		</setRefTemplate>
		
		<!-- A simple get template for an array (conforming to javabeans standard) -->
		<indexedGetTemplate>
			[TYPE] get[NAME](int index);
		</indexedGetTemplate>
		
		<!-- A simple set template for an array (conforming to javabeans standard) -->		
		<indexedSetTemplate>
			void set[NAME](int index, [TYPE] value);
		</indexedSetTemplate>
		
		<!-- A get template for an array of reference objects (conforming to javabeans standard) -->
		<indexedGetRefTemplate>
			[TYPE] get[NAME]Object(int index);
		</indexedGetRefTemplate>
			
		<!-- A set template for an array of reference objects (conforming to javabeans standard) -->
		<indexedSetRefTemplate>
			void set[NAME]Object(int index, [TYPE] value);
		</indexedSetRefTemplate>
	</interface>


	<!-- Definitions for the creation of the implementations -->
	<impl prefix="EQ" package="com.barbre.fiddle.io">


		<!-- Template definition for the class itself -->
		<classTemplate>
			package [PACKAGE];
			
			import [IPACKAGE].[IPREFIX][NAME];
			[IMPORTS]
			
			/**
			 * Generated by BeanBuilder for SIDL Fiddle
			 */
			public class EQ[NAME] extends [PREFIX][PARENT] implements [IPREFIX][NAME][IMPLEMENTS] {
				[VARS]
				
				[ATTRIBUTES]
			}
		</classTemplate>
		
		<!-- Simple get template -->
		<getTemplate>
			public [TYPE] get[NAME]() {
				return [NAME];
			}
		</getTemplate>
		
		<!-- Simple set template -->
		<setTemplate>
			public void set[NAME]([TYPE] value) {
				[TYPE] old = [NAME];
				[NAME] = value;
				firePropertyChange("[NAME]", old, [NAME]);
			}
		</setTemplate>
		
		<!-- A reference object get template -->
		<getRefTemplate>
			public [TYPE] get[NAME]Object() {				
				return [NAME]Object;
			}
		</getRefTemplate>
		
		<!-- A reference object set template -->
		<setRefTemplate>
			public void set[NAME]Object([TYPE] value) {
				[TYPE] old = [NAME]Object;
				[NAME]Object = value;
				firePropertyChange("[NAME]Object", old, [NAME]Object);
			}
		</setRefTemplate>
		
		<!-- A simple get template for an array (conforming to javabeans standard) -->
		<indexedGetTemplate>
			public [TYPE] get[NAME](int index) {
				return [NAME][index];
			}
		</indexedGetTemplate>
		
		<!-- A simple set template for an array (conforming to javabeans standard) -->		
		<indexedSetTemplate>
			public void set[NAME](int index, [TYPE] value) {
				[TYPE][] old = [NAME];
				[NAME][index] = value;
				firePropertyChange("[NAME]", old, [NAME]);
			}
		</indexedSetTemplate>
		
		<!-- A get template for an array of reference objects (conforming to javabeans standard) -->
		<indexedGetRefTemplate>
			public [TYPE] get[NAME]Object(int index) {
				return [NAME]Object[index];
			}
		</indexedGetRefTemplate>
			
		<!-- A set template for an array of reference objects (conforming to javabeans standard) -->
		<indexedSetRefTemplate>
			public void set[NAME]Object(int index, [TYPE] value) {
				[TYPE][] old = [NAME]Object;
				[NAME]Object[index] = value;
				firePropertyChange("[NAME]Object", old, [NAME]Object);
			}
		</indexedSetRefTemplate>
	</impl>
</beanBuilder>



	